export const samples = [{"name":"connect-to-testnet","value":"import { DAppClient, NetworkType } from \"@airgap/beacon-sdk\";\n\n// Create a new DAppClient instance\n// We set the preferred network to \"EDONET\"\n// The \"preferred network\" will make the connection is sent to the correct URL\nconst dAppClient = new DAppClient({ name: 'Beacon Docs', preferredNetwork: NetworkType.EDONET })\n\nconst result = await dAppClient.requestPermissions({\n    network: {\n        type: NetworkType.EDONET // Try: NetworkType.DELPHINET\n    }\n})\n\nconsole.log(`Connected to ${result.address} on ${result.network.type}`)"},{"name":"enable-dark-mode","value":"import { ColorMode, DAppClient } from \"@airgap/beacon-sdk\";\n\n// Create a new DAppClient instance\nconst dAppClient = new DAppClient({ name: 'Beacon Docs' })\n\nawait dAppClient.setColorMode(ColorMode.DARK)\nconsole.log('Setting colorMode to Dark')\n\nconst result = await dAppClient.requestPermissions()\n\nconsole.log('Permissions', result.address)"},{"name":"network-example-1","value":"import { DAppClient, NetworkType } from \"@airgap/beacon-sdk\";\n\n// Create a new DAppClient instance\nconst dAppClient = new DAppClient({ name: 'Beacon Docs' })\n\n// Mainnet with different rpcUrl\nconst result = await dAppClient.requestPermissions({\n    network: {\n        type: NetworkType.MAINNET,\n        rpcUrl: 'https://mainnet-tezos.giganode.io/'\n    }\n})"},{"name":"network-example-2","value":"import { DAppClient, NetworkType } from \"@airgap/beacon-sdk\";\n\n// Create a new DAppClient instance\nconst dAppClient = new DAppClient({ name: 'Beacon Docs', preferredNetwork: NetworkType.EDONET })\n\n// Edonet with default rpcUrl\nconst result = await dAppClient.requestPermissions({\n    network: {\n        type: NetworkType.EDONET\n    }\n})"},{"name":"network-example-3","value":"import { DAppClient, NetworkType } from \"@airgap/beacon-sdk\";\n\n// Create a new DAppClient instance\nconst dAppClient = new DAppClient({ name: 'Beacon Docs', preferredNetwork: NetworkType.EDONET })\n\n// Edonet with different rpcUrl\nconst result = await dAppClient.requestPermissions({\n    network: {\n        type: NetworkType.EDONET,\n        rpcUrl: 'https://testnet-tezos.giganode.io/'\n    }\n})"},{"name":"network-example-4","value":"import { DAppClient, NetworkType } from \"@airgap/beacon-sdk\";\n\n// Create a new DAppClient instance\nconst dAppClient = new DAppClient({ name: 'Beacon Docs', preferredNetwork: NetworkType.CUSTOM })\n\n// Custom network (eg. local development or latest testnet)\nconst result = await dAppClient.requestPermissions({\n    network: {\n        type: NetworkType.CUSTOM,\n        name: 'Local Node',\n        rpcUrl: 'http://localhost:8732/'\n    }\n})"},{"name":"read-previous-state","value":"import { DAppClient } from \"@airgap/beacon-sdk\";\n\n// Create a new DAppClient instance\nconst dAppClient = new DAppClient({ name: 'Beacon Docs' })\n\nconst activeAccount = await dAppClient.getActiveAccount()\nif (activeAccount) {\n    // User already has account connected, everything is ready\n    // You can now do an operation request, sign request, or send another permission request to switch wallet\n    console.log('Already connected: ', activeAccount.address)\n} else {\n    const permissions = await dAppClient.requestPermissions()\n    console.log('New connection: ', permissions.address)\n}"},{"name":"request-permissions","value":"import { DAppClient } from \"@airgap/beacon-sdk\";\n\n// Create a new DAppClient instance\nconst dAppClient = new DAppClient({ name: 'Beacon Docs' })\n\ntry {\n    const permissions = await dAppClient.requestPermissions()\n    console.log('Got permissions', permissions.address)\n} catch (error) {\n    console.log('Got error:', error)\n}"},{"name":"send-operation","value":"import { DAppClient, TezosOperationType } from \"@airgap/beacon-sdk\";\n\n// Create a new DAppClient instance\nconst dAppClient = new DAppClient({ name: 'Beacon Docs' })\n\nconst activeAccount = await dAppClient.getActiveAccount()\nif (activeAccount) {\n    // User already has account connected, everything is ready\n    // You can now do an operation request, sign request, or send another permission request to switch wallet\n    console.log('Already connected: ', activeAccount.address)\n} else {\n    const permissions = await dAppClient.requestPermissions()\n    console.log('New connection: ', permissions.address)\n}\n\ndAppClient.requestOperation({\n    operationDetails: [{\n        kind: TezosOperationType.TRANSACTION,\n        destination: 'tz1...',\n        amount: '1' // Amount in mutez, the smallest unit in Tezos\n    }]\n})"},{"name":"simple-contract-call-no-taquito","value":"import { DAppClient, TezosOperationType } from \"@airgap/beacon-sdk\";\n\n// Create a new DAppClient instance\nconst dAppClient = new DAppClient({ name: 'Beacon Docs' })\n\nconst activeAccount = await dAppClient.getActiveAccount()\nif (activeAccount) {\n    // User already has account connected, everything is ready\n    // You can now do an operation request, sign request, or send another permission request to switch wallet\n    console.log('Already connected: ', activeAccount.address)\n} else {\n    const permissions = await dAppClient.requestPermissions()\n    console.log('New connection: ', permissions.address)\n}\n\nconst TZ_BUTTON_COLORS_CONTRACT = 'KT1RPW5kTX6WFxg8JK34rGEU24gqEEudyfvz'\nconst tokenId = '925'\n\n// Setting the color of TzButton is only possible if you are currently the leader and own a color\n// So this call will likely fail\ntry {\n    const result = await dAppClient.requestOperation({\n        operationDetails: [\n            {\n                kind: TezosOperationType.TRANSACTION,\n                amount: '0',\n                destination: TZ_BUTTON_COLORS_CONTRACT,\n                parameters: {\n                    entrypoint: 'set_color',\n                    value: {\n                        int: tokenId\n                    }\n                }\n            }\n        ]\n    })\n\n    console.log(result)\n} catch (error) {\n    console.log(`The contract call failed and the following error was returned:`, error?.data[1]?.with?.string)\n}"},{"name":"simple-contract-call-with-taquito","value":"import { TezosToolkit } from \"@taquito/taquito\";\nimport { BeaconWallet } from \"@taquito/beacon-wallet\";\n\n\nconst Tezos = new TezosToolkit('https://mainnet-tezos.giganode.io')\nconst wallet = new BeaconWallet({ name: 'Beacon Docs' }) // Takes the same arguments as the DAppClient constructor\n\nTezos.setWalletProvider(wallet)\n\nconst address = await wallet.getPKH()\nif (!address) {\n    await wallet.requestPermissions()\n}\n\n// We now know we are connected, or the above code threw an error\nconst TZ_BUTTON_COLORS_CONTRACT = 'KT1RPW5kTX6WFxg8JK34rGEU24gqEEudyfvz'\nconst contract = await Tezos.wallet.at(TZ_BUTTON_COLORS_CONTRACT)\n\nconst tokenId = '925'\n\nconst result = await contract.methods.set_color(tokenId).send()"}]