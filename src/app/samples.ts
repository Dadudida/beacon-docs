export const samples = [{"name":"request-permissions","value":"import { DAppClient } from \"@airgap/beacon-sdk\";\n\n// Create a new DAppClient instance\nconst dAppClient = new DAppClient({ name: 'Beacon Docs' })\n\nconst permissions = await dAppClient.requestPermissions()\n\nconsole.log('Got permissions', permissions.address)"},{"name":"read-previous-state","value":"import { DAppClient } from \"@airgap/beacon-sdk\";\n\n// Create a new DAppClient instance\nconst dAppClient = new DAppClient({ name: 'Beacon Docs' })\n\nconst activeAccount = await dAppClient.getActiveAccount()\nif (activeAccount) {\n    // User already has account connected, everything is ready\n    // You can now do an operation request, sign request, or send another permission request to switch wallet\n    console.log('Already connected: ', activeAccount.address)\n} else {\n    const permissions = await dAppClient.requestPermissions()\n    console.log('New connection: ', permissions.address)\n}"},{"name":"send-operation","value":"import { DAppClient, TezosOperationType } from \"@airgap/beacon-sdk\";\n\n// Create a new DAppClient instance\nconst dAppClient = new DAppClient({ name: 'Beacon Docs' })\n\nconst activeAccount = await dAppClient.getActiveAccount()\nif (activeAccount) {\n    // User already has account connected, everything is ready\n    // You can now do an operation request, sign request, or send another permission request to switch wallet\n    console.log('Already connected: ', activeAccount.address)\n} else {\n    const permissions = await dAppClient.requestPermissions()\n    console.log('New connection: ', permissions.address)\n}\n\ndAppClient.requestOperation({\n    operationDetails: [{\n        kind: TezosOperationType.TRANSACTION,\n        destination: 'tz1...',\n        amount: '1' // Amount in mutez, the smallest unit in Tezos\n    }]\n})"},{"name":"connect-to-testnet","value":"import { DAppClient, NetworkType } from \"@airgap/beacon-sdk\";\n\n// Create a new DAppClient instance\n// We set the preferred network to \"EDONET\"\n// The \"preferred network\" will make the connection is sent to the correct URL\nconst dAppClient = new DAppClient({ name: 'Beacon Docs', preferredNetwork: NetworkType.EDONET })\n\nconst permissions = await dAppClient.requestPermissions({\n    network: {\n        type: NetworkType.EDONET // Try: NetworkType.DELPHINET\n    }\n})\n\nconsole.log(`Connected to ${permissions.address} on ${permissions.network.type}`)"},{"name":"enable-dark-mode","value":"import { ColorMode, DAppClient } from \"@airgap/beacon-sdk\";\n\n// Create a new DAppClient instance\nconst dAppClient = new DAppClient({ name: 'Beacon Docs' })\n\nawait dAppClient.setColorMode(ColorMode.DARK)\nconsole.log('Setting colorMode to Dark')\n\nconst permissions = await dAppClient.requestPermissions()\n\nconsole.log('Permissions', permissions.address)"}]